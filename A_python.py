# --coding:utf-8--
# File: A_python.py
# Author: dxj728
# Time: 2020年04月13日00时
# 说明：部分python基础知识点学习

import os

'''
列表表达式：
    1. 语法1(标准)：[表达式 for 变量 in 列表]
        表示把得到的每一个变量值都放到 for 前面的表达式中计算 ，然后生成一个列表
        e.g: [x * x for x in range(1, 11)]
        -->: [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]
    
    2. 语法2(if筛选)：[表达式 for 变量 in 列表 if 条件]
        如果加上if判断，则表示把每一个变量值进行判断筛选，如果判断正确再交给表达式进行计算，然后生成一个列表
        此时if表示筛选过滤值，后面不能跟else，否则报错
        e.g: [x for x in range(1, 11) if x % 2 == 0]
        -->: [2, 4, 6, 8, 10]
        
    3. 语法3(if选择)：[表达式 if 条件1 else 值2 for 变量 in 列表]
        上述的的if...else是表达式，必须对列表中取出的值有一个确定的结果
        此时if是表达式，所以后面必须跟else，否则报错
        e.g: [x if x % 2 == 0 else -x for x in range(1, 11)]
        -->: [-1, 2, -3, 4, -5, 6, -7, 8, -9, 10]
        
    4. 语法4(两层循环)： [表达式 for 变量 in 列表 for 变量 in 列表]
        分别从两个列表中取值，组成全排列
        e.g: [m + n for m in 'ABC' for n in 'XYZ']
        -->: ['AX', 'AY', 'AZ', 'BX', 'BY', 'BZ', 'CX', 'CY', 'CZ']
'''


'''
lambda表达式(匿名函数)：
    语法1： lambda 参数: 表达式
        e.g: sum = lambda x, y: x + y
        -->: sum(10, 20)
        -->: 30
        a. 必须用lambda关键字定义
        b. 冒号左边为参数列表，可以无参数，多个参数用’,‘区分， 冒号右边为返回值
        c. lambda表达式本身为一种匿名的、单行函数体的函数

'''

'''
生成器表达式：语法与列表表达式相同，只是把中括号换成圆括号，
        语法：(表达式 for 变量 in 列表 if 条件)
        a. 生成器是一个特定的函数，允许返回一个中间值，然后挂起代码的执行，稍后再恢复执行
        b. 列表表达式的结果会以列表的形式一次性返回所有的数据，如果数据量很大，就会很占内存，所以不适用于迭代大量的数据
        c. 生成器表达式的结果则会返回一个生成器对象，只有当我们去调用这个对象的时候才会读取里面的值，因此生成器表达式是一个对内存使用友好的结构
        d. 生成器表达式的语法跟列表表达式的语法是一样的，只是把中括号换成圆括号，如：(表达式 for 变量 in 列表 if 条件)
'''
